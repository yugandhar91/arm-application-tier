require 'open3'

region = 'EastUS2'
secnet_resource_group = 'SecNet'
test_resource_group_base = 'TestRG'

parameter_files = Dir.glob('example_parameters/*.json').map do |n|
  n.gsub('.parameters.json', '').gsub('example_parameters/','')
end

resource_groups = {
  "attached_disk_centos" => "#{test_resource_group_base}CentOSAD",
  "attached_disk_windows" => "#{test_resource_group_base}WinAD", 
  "chef" => "#{test_resource_group_base}Chef", 
  "no_loadbalancing_centos" => "#{test_resource_group_base}NoLBWin",
  "no_loadbalancing_windows" => "#{test_resource_group_base}NoLBLin",
  "private_loadbalanced" => "#{test_resource_group_base}PrivIP", 
  "public_loadbalanced" => "#{test_resource_group_base}PublicIP",
  "powershell_dsc" => "#{test_resource_group_base}PwrDSC"
}

def to_bool(str)
  return true   if str == true   || str =~ (/(true|t|yes|y|1)$/i)
  return false  if str == false  || str =~ (/(false|f|no|n|0)$/i)
  raise ArgumentError.new("invalid value for Boolean: \"#{str}\"")
end

def create_resource_group(region: , resource_group: )
  stdout, stderr, status = Open3.capture3 "az group exists -n \"#{resource_group}\""
  unless to_bool(stdout.strip)
    puts "Resource group: #{resource_group} in #{region} not found. Creating it."
    sh "az group create -n \"#{resource_group}\" --location #{region}"
  end
end

def clean(resource_group:)
  stdout, stderr, status = Open3.capture3 "az group exists -n \"#{resource_group}\""
  if to_bool(stdout.strip)
    puts "Resource group: #{resource_group} found. Destroying it."
    sh "az group delete -n #{resource_group} -y"
  end
end

def deploy(template_file: , parameters_file: nil, region: , resource_group: )
  create_resource_group(
    region: region, 
    resource_group: resource_group
  )
  parameters_suffix = parameters_file.nil? ? "" : "--parameters #{parameters_file}"
  sh "az group deployment create --template-file #{template_file} --resource-group \"#{resource_group}\" #{parameters_suffix}"
end

# Tasks
namespace :deploy do
  desc 'deploys the example network resource group'
  task :network do
    deploy(
      template_file: './test_requirements/secnet.azuredeploy.json',
      region: region,
      resource_group: secnet_resource_group
    )
  end

  parameter_files.each do |parameters|
    desc "Deploys the group defined by the parameter file: #{parameters}"
    task parameters.to_sym do
      parameters_file = "./example_parameters/#{parameters}.parameters.json"
      deploy(
        template_file: './serverset.azuredeploy.json',
        parameters_file: parameters_file,
        region: region,
        resource_group: resource_groups[parameters]
      )
    end
  end

  deploy_tasks = parameter_files.map do |parameters|
    "deploy:#{parameters}"
  end

  multitask all_configurations: deploy_tasks
end

desc 'Deploys all resource groups'
task :deploy => [
  "deploy:network",
  "deploy:all_configurations"
]

namespace :clean do
  task :network do 
    clean(resource_group: secnet_resource_group)
  end
  
  parameter_files.each do |parameters|
    desc "Destroys the group defined by the parameter file: #{parameters}"
    task parameters.to_sym do
      clean(resource_group: resource_groups[parameters])
    end
  end

  clean_tasks = parameter_files.map do |parameters|
    "clean:#{parameters}"
  end

  multitask all_configurations: clean_tasks
end

desc 'Destroys all resource groups'
task :clean => [
  "clean:all_configurations",
  "clean:network"
]

package_name = 'Provisioner'
dsc_root = './scripts/powershell_dsc'
namespace :dsc do
  task :package do
    require 'zip'
    Dir.chdir(dsc_root) do
      zipfile_path = "#{package_name}.zip"
      FileUtils.rm zipfile_path if File.exist? zipfile_path
      input_filenames = FileList["**/*"].reject do |file|
        File.directory?(file)
      end
  
      Zip::File.open(zipfile_path, Zip::File::CREATE) do |zipfile|
        input_filenames.each do |filename|
          zipfile.add(filename, filename)
        end
      end
    end
  end

  task release: [:package] do
    sh <<-COMMIT
      git add #{dsc_root}/#{package_name}.zip
      git commit -m "releasing #{package_name}.zip"
    COMMIT
  end
end

def bumpTemplateVersion(path)
  require 'json'
  template = JSON.parse File.read(path)
  version = Gem::Version.new(template['contentVersion'])
  new_version = "#{version.bump.to_s}.0"
  templateText = JSON.pretty_generate(template).gsub!(version.to_s, new_version)
  File.write path, templateText
  sh <<-CDE
    git add #{path}
    git commit -m "bumping #{path} version from #{version} to #{new_version}"
  CDE
  new_version
end

task bump: ["dsc:release"] do
  encrypt_disks_version = bumpTemplateVersion('./encrypt_disks.azuredeploy.json')
  serversetversion = bumpTemplateVersion('./serverset.azuredeploy.json')
  serverversion = bumpTemplateVersion('./server.azuredeploy.json')
  sqlversion = bumpTemplateVersion('./sqlpaas.azuredeploy.json')
  endpoint= bumpTemplateVersion('./endpoint.azuredeploy.json')
  versions = [encrypt_disks_version, serversetversion, serverversion, sqlversion, endpoint]
  raise "version mismatch in template versions" if versions.uniq.length != 1
  sh <<-CDE
    git tag -a v#{serverversion} -m \"Releasing v#{serverversion}\"
    git push
    git push origin v#{serverversion}
  CDE
end